library(readr)
X6th <- read_csv("~/6th.csv")
View(X6th)
plot(X6th)
plot(X6th["1"])
plot(X6th["0"])
hist(X6th["0"])
X6
X6t
library(readr)
balance_data_thayna <- read_csv("~/balance_data-thayna.csv")
View(balance_data_thayna)
balance_data_thayna
plot(balance_data_thayna)
install.packages('qtl')
export R_LIBS="/home/nathan/R_libs"
mkdir /home/nathan/R_libs
export R_LIBS="/home/nathan/R_libs"
mkdir /home/nathan/R_libs;
!ls
pwd
pwd()
system('pwd')
x <- system('pwd')
x
x -> system('pwd')
x = system('pwd')
x
x = c(system('pwd'))
x
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
genmap = read_csv('Genetic Map/AxB_F8_PreQTLCartographer.tsv')
genmap = read_csv('Genetic Map/AxB_F8_PreQTLCartographer.tsv', col_types=cols(.default='c'))
View(genmap)
genmap = read_tsv('Genetic Map/AxB_F8_PreQTLCartographer.tsv', col_types=cols(.default='c'))
View(genmap)
View(joined)
joined$`RIL ID` <- as.numeric(joined$`RIL ID`)
joined <- joined[joined$`RIL ID` != NA]
joined <- joined[joined$`RIL ID` != NA,]
library(stats)
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
source('~/Documents/GenSoc/QTL Mapping/Code/multiplot.R')
setwd('~/Documents/GenSoc/Data/')
# Read in the CSV files
Tbl <- list.files(path = "./phendata",
pattern="*ISQ.csv",
recursive = TRUE,
full.names = T) %>%
map_df(function(f) read_csv(f, col_types = cols(.default = "n")) %>% mutate('Measurement number'=gsub(".ISQ.csv","",basename(f))))
# Remove seeds at awkward angles
Tbl <- Tbl[Tbl$length < quantile(Tbl$length, 0.95),]
Tbl <- Tbl[Tbl$width < 2,]
# Remove fragments of rachis
Tbl <- Tbl[Tbl$volume > 1,]
# generate ratio of width/length/depth
Tbl$geometry_ratio <- ((Tbl$width / Tbl$length) + (Tbl$width / Tbl$depth)
+ (Tbl$depth / Tbl$width)+ (Tbl$depth / Tbl$length)
+ (Tbl$length / Tbl$depth) + (Tbl$length / Tbl$width))
# Normalisation function
norml <- function(x){(x-min(x))/(max(x)-min(x))}
Tbl$geometry_ratio <- norml(Tbl$geometry_ratio)
# Flip the Z
Tbl$z <- max(Tbl$z) - Tbl$z
# Remove crease volume
Tbl$crease_volume <- NULL
# Rename the filename for matching up
Tbl$'Measurement number' <- substring(Tbl$'Measurement number', 5)
Tbl$'Measurement number' <- as.numeric(Tbl$'Measurement number') + 7
# load matching file
scans2rils <- read_csv('scans_and_RILs_linker.csv', col_types = cols(.default = 'c'))
scans2rils$`Measurement number` <- as.numeric(scans2rils$`Measurement number`)
# Join up on measurement number
joined = merge(Tbl, scans2rils)
# Remove parent scans
joined$`RIL ID` <- as.numeric(joined$`RIL ID`)
joined <- joined[is.na(joined$`RIL ID`),]
library(stats)
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
source('~/Documents/GenSoc/QTL Mapping/Code/multiplot.R')
setwd('~/Documents/GenSoc/Data/')
# Read in the CSV files
Tbl <- list.files(path = "./phendata",
pattern="*ISQ.csv",
recursive = TRUE,
full.names = T) %>%
map_df(function(f) read_csv(f, col_types = cols(.default = "n")) %>% mutate('Measurement number'=gsub(".ISQ.csv","",basename(f))))
# Remove seeds at awkward angles
Tbl <- Tbl[Tbl$length < quantile(Tbl$length, 0.95),]
Tbl <- Tbl[Tbl$width < 2,]
# Remove fragments of rachis
Tbl <- Tbl[Tbl$volume > 1,]
# generate ratio of width/length/depth
Tbl$geometry_ratio <- ((Tbl$width / Tbl$length) + (Tbl$width / Tbl$depth)
+ (Tbl$depth / Tbl$width)+ (Tbl$depth / Tbl$length)
+ (Tbl$length / Tbl$depth) + (Tbl$length / Tbl$width))
# Normalisation function
norml <- function(x){(x-min(x))/(max(x)-min(x))}
Tbl$geometry_ratio <- norml(Tbl$geometry_ratio)
# Flip the Z
Tbl$z <- max(Tbl$z) - Tbl$z
# Remove crease volume
Tbl$crease_volume <- NULL
# Rename the filename for matching up
Tbl$'Measurement number' <- substring(Tbl$'Measurement number', 5)
Tbl$'Measurement number' <- as.numeric(Tbl$'Measurement number') + 7
# load matching file
scans2rils <- read_csv('scans_and_RILs_linker.csv', col_types = cols(.default = 'c'))
scans2rils$`Measurement number` <- as.numeric(scans2rils$`Measurement number`)
# Join up on measurement number
joined = merge(Tbl, scans2rils)
# Remove parent scans
joined$`RIL ID` <- as.numeric(joined$`RIL ID`)
parents <- joined[is.na(joined$`RIL ID`),]
joined <- joined[!is.na(joined$`RIL ID`),]
View(joined)
View(joined)
spikes <- tapply(Tbl$`RIL ID` , df$length, mean
)
spikes <- tapply(Tbl$`RIL ID` , df$length, mean)
spikes <- tapply(Tbl$`RIL ID` , Tbl$length, mean)
spikes <- tapply(joined$`RIL ID` , joined$length, mean)
spikes
spikes <- aggregate(.~`RIL ID`, data=joined, mean)
View(spikes)
spikes <- aggregate(.~`RIL ID`, data=joined[`RIL ID`], mean)
spikes <- aggregate(.~`RIL ID`, data=joined[0], mean)
library(plyr)
library(stats)
library(plyr)
library(dplyr)
library(purrr)
library(readr)
library(ggplot2)
phendata <- data.frame()
aggregate(length~`RIL ID`,data=joined,FUN=mean)
help("aggregate")
for (p in phenotypes ){
phendata$p <- aggregate(length~p,data=joined,FUN=mean)$p
}
phenotypes <- c('length', 'width', 'depth', 'circularity', 'volume',
'crease_depth', 'surface_area', 'z', 'geometry_ratio')
phendata <- data.frame()
for (p in phenotypes ){
phendata$p <- aggregate(length~p,data=joined,FUN=mean)$p
}
for (p in phenotypes ){
phendata$`p` <- aggregate(length~`p`,data=joined,FUN=mean)$p
}
for (p in phenotypes ){
phendata$'width' <- aggregate(length~'width',data=joined,FUN=mean)$p
}
for (p in phenotypes ){
phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
}
phendata
phendata$`width` <- 1
phendata$`width` <- joined$width
phendata$width <- joined$width
phendata <- data.frame(phenotypes)
View(phendata)
phendata <- data.frame(cols=phenotypes)
View(phendata)
phendata <- data.frame()
colnames(phendata) <- phenotypes
phenotypes <- c('length', 'width', 'depth', 'circularity', 'volume',
'crease_depth', 'surface_area', 'z', 'geometry_ratio')
phendata <- data.frame(matrix(ncol = length(phenotypes), nrow = 0))
colnames(phendata) <- phenotypes
phendata$width <- joined$width
phendata <- data.frame(joined$width)
phendata$length <- joined$length
phendata <- data.frame(matrix(ncol = length(phenotypes), ))
colnames(phendata) <- phenotypes
phendata$length <- joined$length
phendata <- data.frame(matrix(ncol = length(phenotypes), nrow = length(unique(joined$`RIL ID`))))
colnames(phendata) <- phenotypes
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(length(aggregate(length~p,data=joined,FUN=mean)$p))
}
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(length(aggregate(length~`p`,data=joined,FUN=mean)$p))
}
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(length(aggregate(length~[[p]],data=joined,FUN=mean)$p))
}
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(length(aggregate(length~[p],data=joined,FUN=mean)$p))
}
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(length(aggregate(length~p,data=joined,FUN=mean)$p))
}
for (p in phenotypes ){
#phendata$`width` <- aggregate(length~`width`,data=joined,FUN=mean)$p
print(p)
#print(length(aggregate(length~p,data=joined,FUN=mean)$p))
}
Tbl[p]
Tbl[[p]]
aggregate(length~`RIL ID`,data=joined,FUN=mean)
ddply(dataframe, .(Status), summarize, mean_value = mean(Value))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean('length'))
warnings()
ddply(joined, .(`RIL ID`), summarize, mean_value = mean('width'))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(`width``))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(`width`))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(width))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean('width'))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean('width'))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(length)
)
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(length))
ddply(joined, .(`RIL ID`), summarize, mean_value = mean(geometry_ratio))
do.call(ddply(joined, .(`RIL ID`), summarize, mean_value = mean(length)))
aggregate(length~`RIL ID`,data=joined,FUN=mean)
aggregate(length+width~`RIL ID`,data=joined,FUN=mean)
aggregate(length~`RIL ID`,data=joined,FUN=mean)
aggregate(length,width~`RIL ID`,data=joined,FUN=mean)
aggregate(.~`RIL ID`, joined, mean)
aggregate(c('length', 'width')~`RIL ID`, joined, mean)
joined %>%
group_by('RIL ID') %>%
summarise_each(funs(mean))
x <- joined %>%
group_by('RIL ID') %>%
summarise_each(funs(mean))
list(phenotypes)
x <- list(phenotypes)
phenotypes <- list('length', 'width', 'depth', 'circularity', 'volume',
'crease_depth', 'surface_area', 'z', 'geometry_ratio')
phenotypes <- list(joined$length, joined$width, joined$depth, joined$circularity, joined$volume,
joined$crease_depth, joined$surface_area, joined$z, joined$geometry_ratio)
x <-aggregate(phenotypes, by joined$`RIL ID`, mean)
x <-aggregate(phenotypes, by=joined$`RIL ID`, mean)
x <-aggregate(phenotypes, by=list(joined$`RIL ID`), mean)
View(x)
phenotypes <- list(joined$length, joined$width, joined$depth, joined$circularity, joined$volume,
joined$crease_depth, joined$surface_area, joined$z, joined$geometry_ratio)
phendata <-aggregate(phenotypes, by=list(joined$`RIL ID`), mean)
colnames(phendata) <- c('length', 'width', 'depth', 'circularity', 'volume', 'crease_depth', 'surface_area', 'z', 'geometry_ratio')
phenotypes <- list(joined$length, joined$width, joined$depth, joined$circularity, joined$volume,
joined$crease_depth, joined$surface_area, joined$z, joined$geometry_ratio)
phendata <-aggregate(phenotypes, by=list(joined$`RIL ID`), mean)
colnames(phendata) <- c('RIL','length', 'width', 'depth', 'circularity', 'volume', 'crease_depth', 'surface_area', 'z', 'geometry_ratio')
write_tsv(phendata, 'meanRILs.tsv')
library(GGally)
ggcorr(phendata)
t(phendata)
t(phendata[, !=RIL])
t(phendata[, !phendata=RIL])
t(phendata[, phendata!=RIL])
t(phendata[, phendata!=`RIL`])
t(phendata[, RIL:= NULL)
t(phendata[, RIL:= NULL])
t(phendata[ RIL:= NULL])
t(phendata[ RIL:= NULL,])
t(phendata[, 'RIL':= NULL)
t(phendata[, 'RIL':= NULL])
t(within(phendata, rm(RIL)))
write_tsv(t(within(phendata, rm(RIL)), 'AxB_F8_PreQTLCartographer.tsv')
)
write_tsv(t(within(phendata, rm(RIL)),)'AxB_F8_PreQTLCartographer.tsv')
write_tsv(t(within(phendata, rm(RIL))),'AxB_F8_PreQTLCartographer.tsv')
rotate <- t(phendata)
View(rotate)
x <- t(phendata)
write_tsv(x, 'test.tsv')
write_csv(x, 'test.tsv')
is.data.frame(x)
typeof(x)
data.frame(x)
write_tsv(data.frame(t(within(phendata, rm(RIL)))),'AxB_F8_PreQTLCartographer.tsv')
write_tsv(data.frame(t(within(phendata, rm(RIL)))),'AxB_F8_PreQTLCartographer-Phenotypes.tsv')
write_tsv(data.frame(t(within(phendata, rm(RIL)))),'Genetic Map/AxB_F8_PreQTLCartographer-Phenotypes.tsv')
genmap = read_tsv('Genetic Map/AxB_F8_PreQTLCartographer.tsv', col_types=cols(.default='c'))
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
ls
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
system('ls')
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
View(phendata)
View(genmap)
colnames(genmap)
colnames(genmap[3:])
colnames(genmap[3:-1])
colnames(genmap[3:-1,])
colnames(genmap[,3:-1])
genmap[,3]
colnames(genmap[3:-1,])
genmap[3:-1,]
genmap[3:5,]
genmap[3:-1]
genmap[3:length(colnames(genmap))]
genmap[3:length(colnames(genmap))]
gsub("ABR6xBD21", "", genmap[3:length(colnames(genmap))])
gsub("AB", "", genmap[3:length(colnames(genmap))])
gsub("AB", "", colnames(genmap[3:length(colnames(genmap)))])
gsub("AB", "", colnames(genmap[3:length(colnames(genmap))])
gsub("AB", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6xBD21", "", genmap[3:length(colnames(genmap))])
gsub("ABR6xBD21", "", colnames(genmap[3:length(colnames(genmap)) )  ])
gsub("ABR6xBD21", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6 x BD21", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6 x", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6 x Bd21 ", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6 x Bd21 ", "", colnames(genmap[3:length(colnames(genmap))]))
gsub(" F7-1 F8-1 ", "", colnames(genmap[3:length(colnames(genmap))]))
gsub("ABR6 x Bd21 ", "", colnames(genmap[3:length(colnames(genmap))]))
colnames(genmap[3:length(colnames(genmap))]) <- gsub("ABR6 x Bd21 ", "", colnames(genmap[3:length(colnames(genmap))]))
colnames(genmap[3:length(colnames(genmap))]) <- gsub(" F7-1 F8-1 ", "", colnames(genmap[3:length(colnames(genmap))]))
View(genmap)
colnames(genmap)
colnames(genmap) <- gsub("ABR6 x Bd21 ", "", colnames(genmap))
colnames(genmap) <- gsub(" F7-1 F8-1 ", "", colnames(genmap))
View(genmap)
colnames(genmap) <- gsub(" F7-1 F8-1 ", "", colnames(genmap))
gsub(" F7-1 F8-1 ", "", colnames(genmap))
gsub("F7-1", "", colnames(genmap))
gsub("F7-1 F8-1", "", colnames(genmap))
gsub(" F7-1 F8-1", "", colnames(genmap))
View(genmap)
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
View(genmap)
t(genmap)
View(t(genmap))
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
View(phendata)
write_tsv(t(phendata), 'phen.tsv')
write_tsv(data.frame(t(phendata)), 'Genetic Map/AxB_F8_PreQTLCartographer-Phenotypes.tsv')
# Next sort out the genetic map
genmap = read_tsv('Genetic Map/AxB_F8_PreQTLCartographer-Genotypes.tsv', col_types=cols(.default='c'))
# fix naming
colnames(genmap) <- gsub("ABR6 x Bd21 F2-", "", colnames(genmap))
colnames(genmap) <- gsub(" F7-1 F8-1", "", colnames(genmap))
colnames(genmap)
colnames(genmap)[3:-1]
colnames(genmap)[3:100]
colnames(genmap)[3:200]
colnames(genmap)[4:137]
colnames(genmap)[4:132]
colnames(genmap)[4:122]
colnames(genmap)[4:118]
colnames(genmap)[4:119]
colnames(genmap)[4:118]
colnames(genmap)[4:118] <- as.numeric(colnames(genmap)[4:118])
View(genmap)
list(colnames(genmap)[4:118])
View(phendata)
phendata[phendata$RIL in colnames(genmap)[4:118]]
phendata[phendata$RIL %in% colnames(genmap)[4:118]]
phendata[phendata$RIL %in% colnames(genmap)[4:118],]
mapable_phens <- phendata[phendata$RIL %in% colnames(genmap)[4:118],]
write_tsv(data.frame(t(mapable_phens)), 'Genetic Map/AxB_F8_PreQTLCartographer-Phenotypes.tsv')
View(mapable_phens)
# Set working directory
setwd('~/Documents/GenSoc/Data/Genetic Map/')
# Read in Rqtl package
library(qtl)
# load plotting packages
library(ggplot2)
library(ggrepel)
library(tidyr)
library(dplyr)
#load in qtl plotter functions
source('~/Documents/GenSoc/QTL Mapping/Code/qtlplotter.R')
# Read in:
#	(1) Genetic Map
#	(2) Marker Position Information
#	(3) Phenotypic Data
#	(4) Chromosome ID
#	(5) Marker Names
#	(6) Phenotype Names
HM = read.cross(format="qtlcart", file="qtlcart.cro", mapfile="qtlcart.map")
HM = calc.genoprob(HM, map.function="kosambi")
geno.image(HM)
X11()
geno.image(HM)
plot(HM)
library(gclus)
png(file="figure_1_correlation_matrix.png", width=2000, height=2000)
system('pwd')
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
X11()
plot(HM)
geno.image(HM)
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
source('~/Documents/GenSoc/QTL Mapping/Code/generatePhenoData.R')
qtl_plot(HM)
